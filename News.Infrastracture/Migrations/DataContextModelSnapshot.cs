// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using News.Infrastracture.DataContexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace News.Infrastracture.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("News.Infrastracture.Entities.Story", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("News.Infrastracture.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("EmailConfirmed");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("News.Infrastracture.Entities.UserEmailConfirmation", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<int>("ConfirmationUserID");

                    b.HasKey("Id");

                    b.HasIndex("ConfirmationUserID")
                        .IsUnique();

                    b.ToTable("UserEmailConfirmations");
                });

            modelBuilder.Entity("News.Infrastracture.Entities.Story", b =>
                {
                    b.OwnsOne("News.Infrastracture.Models.StoryModel", "Model", b1 =>
                        {
                            b1.Property<int>("StoryId");

                            b1.Property<string>("PictureUrl");

                            b1.Property<string>("Summary")
                                .IsRequired();

                            b1.Property<string>("Text")
                                .IsRequired();

                            b1.Property<string>("Title")
                                .IsRequired();

                            b1.HasKey("StoryId");

                            b1.ToTable("Stories");

                            b1.HasOne("News.Infrastracture.Entities.Story")
                                .WithOne("Model")
                                .HasForeignKey("News.Infrastracture.Models.StoryModel", "StoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("News.Infrastracture.Entities.User", b =>
                {
                    b.OwnsOne("News.Infrastracture.Models.UserModel", "Model", b1 =>
                        {
                            b1.Property<int>("UserId");

                            b1.Property<DateTime>("BirthDate");

                            b1.Property<string>("Email")
                                .IsRequired();

                            b1.Property<string>("Login")
                                .IsRequired();

                            b1.Property<string>("Name")
                                .IsRequired();

                            b1.Property<string>("PasswordHash")
                                .IsRequired();

                            b1.Property<string>("Patronymic")
                                .IsRequired();

                            b1.Property<int>("Role");

                            b1.Property<string>("Surname")
                                .IsRequired();

                            b1.HasKey("UserId");

                            b1.HasIndex("Email")
                                .IsUnique();

                            b1.HasIndex("Login")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.HasOne("News.Infrastracture.Entities.User")
                                .WithOne("Model")
                                .HasForeignKey("News.Infrastracture.Models.UserModel", "UserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("News.Infrastracture.Entities.UserEmailConfirmation", b =>
                {
                    b.HasOne("News.Infrastracture.Entities.User", "ConfirmationUser")
                        .WithOne()
                        .HasForeignKey("News.Infrastracture.Entities.UserEmailConfirmation", "ConfirmationUserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
